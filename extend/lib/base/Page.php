<?php 

/**
 * 秀仙系统 shopxian_release/3.0.0
 * ============================================================================
 * * 版权所有 2017-2018 上海秀仙网络科技有限公司，并保留所有权利。
 * 网站地址: http://www.shopxian.com；
 * ----------------------------------------------------------------------------
 * 本软件只能免费使用  不允许对程序代码以任何形式任何目的再发布或者出售。
 * ============================================================================
 * 作者: 张启全 

 * 时间: 2018-03-17 23:28:45
 */   namespace lib\base;    use think\Paginator;    class Page extends Paginator  {              protected function getPreviousButton($text = "&laquo;")      {            if ($this->currentPage() <= 1) {              return $this->getDisabledTextWrapper($text);          }            $url = $this->url(              $this->currentPage() - 1          );            return $this->getPageLinkWrapper($url, $text);      }              protected function getNextButton($text = '&raquo;')      {          if (!$this->hasMore) {              return $this->getDisabledTextWrapper($text);          }            $url = $this->url($this->currentPage() + 1);            return $this->getPageLinkWrapper($url, $text);      }      protected function url($page){          if ($page <= 0) {              $page = 1;          }            if (strpos($this->options['path'], '[PAGE]') === false) {              $parameters = [$this->options['var_page'] => $page];              $path       = $this->options['path'];          } else {              $parameters = [];              $path       = str_replace('[PAGE]', $page, $this->options['path']);          }            if (count($this->options['query']) > 0) {              $parameters = array_merge($this->options['query'], $parameters);          }            $url = $path;          if (!empty($parameters)) {              $pathinfo_depr= config('pathinfo_depr');              $avg=$pathinfo_depr;              $url_html_suffix= config('url_html_suffix');              foreach($parameters as $k=>$v){                  $avg.=$k.$pathinfo_depr.$v;              }              $url=str_replace('.'.$url_html_suffix, '', $url);              $arr=explode($pathinfo_depr, $url);              foreach ($arr as $key => $value) {                  if($value=='page'){                      unset($arr[$key]);                      unset($arr[$key+1]);                  }              }              $url=implode($pathinfo_depr, $arr);              $url.=$avg.'.'.$url_html_suffix;                       }            return $url . $this->buildFragment();      }            protected function getLinks()      {          if ($this->simple) {              return '';          }            $block = [              'first'  => null,              'slider' => null,              'last'   => null,          ];            $side   = 3;          $window = $side * 2;            if ($this->lastPage < $window + 6) {              $block['first'] = $this->getUrlRange(1, $this->lastPage);          } elseif ($this->currentPage <= $window) {              $block['first'] = $this->getUrlRange(1, $window + 2);              $block['last']  = $this->getUrlRange($this->lastPage - 1, $this->lastPage);          } elseif ($this->currentPage > ($this->lastPage - $window)) {              $block['first'] = $this->getUrlRange(1, 2);              $block['last']  = $this->getUrlRange($this->lastPage - ($window + 2), $this->lastPage);          } else {              $block['first']  = $this->getUrlRange(1, 2);              $block['slider'] = $this->getUrlRange($this->currentPage - $side, $this->currentPage + $side);              $block['last']   = $this->getUrlRange($this->lastPage - 1, $this->lastPage);          }            $html = '';            if (is_array($block['first'])) {              $html .= $this->getUrlLinks($block['first']);          }            if (is_array($block['slider'])) {              $html .= $this->getDots();              $html .= $this->getUrlLinks($block['slider']);          }            if (is_array($block['last'])) {              $html .= $this->getDots();              $html .= $this->getUrlLinks($block['last']);          }            return $html;      }              public function render()      {          if ($this->hasPages()) {              if ($this->simple) {                  return sprintf(                      '<ul class="pager">%s %s</ul>',                      $this->getPreviousButton(),                      $this->getNextButton()                  );              } else {                  return sprintf(                      '<ul class="pagination">%s %s %s</ul>',                      $this->getPreviousButton(),                      $this->getLinks(),                      $this->getNextButton()                  );              }          }      }              protected function getAvailablePageWrapper($url, $page)      {          return '<li><a href="' . htmlentities($url) . '">' . $page . '</a></li>';      }              protected function getDisabledTextWrapper($text)      {          return '<li class="disabled"><span>' . $text . '</span></li>';      }              protected function getActivePageWrapper($text)      {          return '<li class="active"><span>' . $text . '</span></li>';      }              protected function getDots()      {          return $this->getDisabledTextWrapper('...');      }              protected function getUrlLinks(array $urls)      {          $html = '';            foreach ($urls as $page => $url) {              $html .= $this->getPageLinkWrapper($url, $page);          }            return $html;      }              protected function getPageLinkWrapper($url, $page)      {          if ($this->currentPage() == $page) {              return $this->getActivePageWrapper($page);          }            return $this->getAvailablePageWrapper($url, $page);      }  }