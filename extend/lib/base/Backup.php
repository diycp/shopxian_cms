<?php 

/**
 * 秀仙系统 shopxian_release/3.0.0
 * ============================================================================
 * * 版权所有 2017-2018 上海秀仙网络科技有限公司，并保留所有权利。
 * 网站地址: http://www.shopxian.com；
 * ----------------------------------------------------------------------------
 * 本软件只能免费使用  不允许对程序代码以任何形式任何目的再发布或者出售。
 * ============================================================================
 * 作者: 张启全 

 * 时间: 2018-03-17 23:28:43
 */   namespace lib\base;  use think\Db;  class Backup  {                private $fp;                  private $file;              private $size = 0;            private $dbconfig=array();              private $config=array(          'path'     => './Data/',         'part'     => 20971520,         'compress' => 0,         'level'    => 9      );            public function __construct($config=[]){          $this->config = array_merge($this->config, $config);                   $this->setFile();                   $this->setDbConn();                   if(!$this->checkPath($this->config['path'])){              throw new \Exception("The current directory is not writable");          }      }              public function setDbConn($dbconfig=[])      {          if (empty($dbconfig)) {              $this->dbconfig = config('database');           }else{              $this->dbconfig=$dbconfig;          }          return $this;      }            public function setFile($file=null)      {          if(is_null($file)){              $this->file=['name'=>date('Ymd-His'),'part'=>1];          }else{              if(!array_key_exists("name",$file) && !array_key_exists("part",$file)){                  $this->file=$file['1'];              }else{                  $this->file=$file;              }                       }          return $this;      }           public static function connect()      {         return  Db::connect();      }             public function fileList()      {         if(!is_dir($this->config['path'])){          mkdir($this->config['path'], 0755, true);         }         $path = realpath($this->config['path']);         $flag = \FilesystemIterator::KEY_AS_FILENAME;         $glob = new \FilesystemIterator($path,  $flag);         $list = array();         foreach ($glob as $name => $file) {              if(preg_match('/^\d{8,8}-\d{6,6}-\d+\.sql(?:\.gz)?$/', $name)){                  $name = sscanf($name, '%4s%2s%2s-%2s%2s%2s-%d');                    $date = "{$name[0]}-{$name[1]}-{$name[2]}";                  $time = "{$name[3]}:{$name[4]}:{$name[5]}";                  $part = $name[6];                    if(isset($list["{$date} {$time}"])){                      $info = $list["{$date} {$time}"];                      $info['part'] = max($info['part'], $part);                      $info['size'] = $info['size'] + $file->getSize();                  } else {                      $info['part'] = $part;                      $info['size'] = $file->getSize();                  }                  $extension        = strtoupper(pathinfo($file->getFilename(), PATHINFO_EXTENSION));                  $info['compress'] = ($extension === 'SQL') ? '-' : $extension;                  $info['time']     = strtotime("{$date} {$time}");                    $list["{$date} {$time}"] = $info;              }          }           return $list;      }      public function getFile($type='',$time=0)      {                   if(!is_numeric($time) ){              throw new \Exception("{$time} Illegal data type");          }          switch ($type)          {              case 'time':                  $name  = date('Ymd-His', $time) . '-*.sql*';                  $path  = realpath($this->config['path']) . DIRECTORY_SEPARATOR . $name;                  return glob($path);                  break;              case 'timeverif':                  $name  = date('Ymd-His', $time) . '-*.sql*';                  $path  = realpath($this->config['path']) . DIRECTORY_SEPARATOR . $name;                  $files = glob($path);                  $list  = array();                  foreach($files as $name){                      $basename = basename($name);                      $match    = sscanf($basename, '%4s%2s%2s-%2s%2s%2s-%d');                      $gz       = preg_match('/^\d{8,8}-\d{6,6}-\d+\.sql.gz$/', $basename);                      $list[$match[6]] = array($match[6], $name, $gz);                  }                  $last = end($list);                  if(count($list) === $last[0]){                      return $list;                  } else {                      throw new \Exception("File {$files['0']} may be damaged, please check again");                  }                                   break;              case 'pathname':                  return "{$this->config['path']}{$this->file['name']}-{$this->file['part']}.sql";                  break;               case 'filename':                  return "{$this->file['name']}-{$this->file['part']}.sql";                  break;               case 'filepath':                  return $this->config['path'];                  break;              default:                  $arr=array(                      'pathname'=>"{$this->config['path']}{$this->file['name']}-{$this->file['part']}.sql",                      'filename'=>"{$this->file['name']}-{$this->file['part']}.sql",                      'filepath'=>$this->config['path'],                      'file'=>$this->file                  );              return $arr;          }      }             public function delFile($time)      {          if($time){              $file=$this->getFile('time',$time);              array_map("unlink", $this->getFile('time',$time));              if(count( $this->getFile('time',$time) )){                  throw new \Exception("File {$path} deleted failed");              } else {                 return $time;              }          } else {              throw new \Exception("{$time} Time parameter is incorrect");          }      }      public function import($start){                   $db =  self::connect();            if($this->config['compress']){              $gz   = gzopen($this->file[1], 'r');              $size = 0;          } else {              $size = filesize($this->file[1]);              $gz   = fopen($this->file[1], 'r');          }            $sql  = '';          if($start){              $this->config['compress'] ? gzseek($gz, $start) : fseek($gz, $start);          }          for($i = 0; $i < 1000; $i++){              $sql .= $this->config['compress'] ? gzgets($gz) : fgets($gz);               if(preg_match('/.*;$/', trim($sql))){                  if(false !== $db->execute($sql)){                      $start += strlen($sql);                  } else {                      return false;                  }                  $sql = '';              } elseif ($this->config['compress'] ? gzeof($gz) : feof($gz)) {                  return 0;              }          }            return array($start, $size);      }               public function dataList($table=null)      {          $db = self::connect();                    if(is_null($table)){              $list = $db->query("SHOW TABLE STATUS");          }else{              $list = $db->query("show columns from {$table}");          }          return  array_map('array_change_key_case', $list);     }            public function Backup_Init(){          $sql  = "-- -----------------------------\n";          $sql .= "-- ShopXian MySQL Data Transfer \n";    $sql .= "-- 网站地址 www.shopxian.com \n";          $sql .= "-- \n";          $sql .= "-- Host     : " .$this->dbconfig['hostname']. "\n";          $sql .= "-- Port     : " .$this->dbconfig['hostport']. "\n";          $sql .= "-- Database : " .$this->dbconfig['database']. "\n";          $sql .= "-- \n";          $sql .= "-- Part : #{$this->file['part']}\n";          $sql .= "-- Date : " . date("Y-m-d H:i:s") . "\n";          $sql .= "-- -----------------------------\n\n";          $sql .= "SET FOREIGN_KEY_CHECKS = 0;\n\n";          return  $this->write($sql);      }              public function backup($table, $start){            $db = self::connect();                   if(0 == $start){              $result = $db->query("SHOW CREATE TABLE `{$table}`");              $sql  = "\n";              $sql .= "-- -----------------------------\n";              $sql .= "-- Table structure for `{$table}`\n";              $sql .= "-- -----------------------------\n";              $sql .= "DROP TABLE IF EXISTS `{$table}`;\n";                $sql .= trim($result[0]['Create Table']) . ";\n\n";                if(false === $this->write($sql)){                  return false;              }          }                     $result = $db->query("SELECT COUNT(*) AS count FROM `{$table}`");                   $count  = $result['0']['count'];                                 if($count){                           if(0 == $start){                  $sql  = "-- -----------------------------\n";                  $sql .= "-- Records of `{$table}`\n";                  $sql .= "-- -----------------------------\n";                  $this->write($sql);              }                             $result = $db->query("SELECT * FROM `{$table}` LIMIT {$start}, 1000");              foreach ($result as $row) {                  $row = array_map('addslashes', $row);                  $sql = "INSERT INTO `{$table}` VALUES ('" . str_replace(array("\r","\n"),array('\r','\n'),implode("', '", $row)) . "');\n";                  if(false === $this->write($sql)){                      return false;                  }              }                             if($count > $start + 1000){                  return array($start + 1000, $count);              }          }                   return 0;      }            public function optimize($tables = null){          if($tables) {              $db = self::connect();              if(is_array($tables)){                  $tables = implode('`,`', $tables);                  $list = $db->query("OPTIMIZE TABLE `{$tables}`");              } else {                  $list = $db->query("OPTIMIZE TABLE `{$tables}`");              }              if($list){                  return $tables;              } else {                  throw new \Exception("data sheet'{$tables}'Repair mistakes please try again!");              }          } else {              throw new \Exception("Please specify the table to be repaired!");          }      }            public function repair($tables = null){          if($tables) {              $db = self::connect();              if(is_array($tables)){                  $tables = implode('`,`', $tables);                  $list = $db->query("REPAIR TABLE `{$tables}`");              } else {                  $list =  $db->query("REPAIR TABLE `{$tables}`");              }              if($list){                  return $list;              } else {                  throw new \Exception("data sheet'{$tables}'Repair mistakes please try again!");              }          } else {              throw new \Exception("Please specify the table to be repaired!");          }      }              private function write($sql){          $size = strlen($sql);                            $size = $this->config['compress'] ? $size / 2 : $size;          $this->open($size);           return $this->config['compress'] ? @gzwrite($this->fp, $sql) : @fwrite($this->fp, $sql);      }            private function open($size){          if($this->fp){              $this->size += $size;              if($this->size > $this->config['part']){                  $this->config['compress'] ? @gzclose($this->fp) : @fclose($this->fp);                  $this->fp = null;                  $this->file['part']++;                  session('backup_file', $this->file);                  $this->create();              }          } else {              $backuppath = $this->config['path'];              $filename   = "{$backuppath}{$this->file['name']}-{$this->file['part']}.sql";              if($this->config['compress']){                  $filename = "{$filename}.gz";                  $this->fp = @gzopen($filename, "a{$this->config['level']}");              } else {                  $this->fp = @fopen($filename, 'a');              }              $this->size = filesize($filename) + $size;          }      }            protected function checkPath($path)      {          if (is_dir($path)) {              return true;          }          if (mkdir($path, 0755, true)) {              return true;          } else {              return false;          }      }            public function __destruct(){          $this->config['compress'] ? @gzclose($this->fp) : @fclose($this->fp);      }    }