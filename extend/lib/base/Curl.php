<?php 

/**
 * 秀仙系统 shopxian_release/3.0.0
 * ============================================================================
 * * 版权所有 2017-2018 上海秀仙网络科技有限公司，并保留所有权利。
 * 网站地址: http://www.shopxian.com；
 * ----------------------------------------------------------------------------
 * 本软件只能免费使用  不允许对程序代码以任何形式任何目的再发布或者出售。
 * ============================================================================
 * 作者: 张启全 

 * 时间: 2018-03-17 23:28:43
 */   namespace lib\base;    class Curl {      protected $ch;      protected $time_start;      protected $return_type;      protected $url;      protected $request_data;      protected $return_data;      protected $request_type='get';      function __construct($return_type='string') {          $this->time_start=microtime(true);          $this->return_type=$return_type;      }              public function post($url,$data=[],$route_url='',$open_cookie=false,$cookie_path='',$ip=''){          $this->url=$url;          $this->request_data=$data;          $this->request_type='post';          if($route_url==false){              $baseUrl = ( isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') ? 'https:             $baseUrl .= isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : getenv('HTTP_HOST');              $route_url=$baseUrl.'/';          }          if($ip=='')$ip='114.'.rand(0, 114).'.'. rand(0, 114).'.'.rand(0, 114);          $parse_url=parse_url($url);          if(!isset($parse_url['scheme']))$parse_url['scheme']='http';          $this->ch = curl_init();                   curl_setopt($this->ch, CURLOPT_URL, $url);          if($parse_url['scheme']=='https'){              curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, FALSE);                 curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, FALSE);          }          curl_setopt($this->ch, CURLOPT_REFERER, $route_url);            curl_setopt($this->ch, CURLOPT_HTTPHEADER, ['X-FORWARDED-FOR:'.$ip, 'CLIENT-IP:'.$ip]);          curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);         curl_setopt($this->ch, CURLOPT_BINARYTRANSFER, false) ;         curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, TRUE);                  curl_setopt($this->ch, CURLOPT_POST, 1);          if(is_array($data))$data= json_encode($data,JSON_UNESCAPED_UNICODE);          curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data);          curl_setopt($this->ch, CURLOPT_HTTPHEADER, array(                'Content-Type: application/json; charset=utf-8',                'Content-Length: ' . strlen($data))            );                       if($open_cookie&&$cookie_path){              if(file_exists($cookie_path)){                  curl_setopt($this->ch, CURLOPT_COOKIEFILE, $cookie_path);              }else{                  curl_setopt($this->ch, CURLOPT_COOKIEJAR,  $cookie_path);              }          }                   $data = curl_exec($this->ch);          $this->return_data=$data;          if('array'== $this->return_type&& is_array($data=json_decode($data,true)))return $data;          return $data;      }            public function get($url,$data=[],$route_url='',$open_cookie=false,$cookie_path='',$ip=''){          $this->url=$url;          $this->request_data=$data;          $this->request_type='get';          if($route_url==''){              $baseUrl = ( isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') ? 'https:             $baseUrl .= isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : getenv('HTTP_HOST');              $route_url=$baseUrl.'/';          }          if($ip=='')$ip= isset ($_SERVER['REMOTE_ADDR'])?$_SERVER['REMOTE_ADDR']:'127.0.0.1';          $query=[];          $parse_url=parse_url($url);          if(!isset($parse_url['host'])){$parse_url['host']=$url;$parse_url['path']='';};          if(!isset($parse_url['scheme']))$parse_url['scheme']='http';          if(isset($parse_url['query']))parse_str($parse_url['query'],$query);          if(!is_array($data))$data=[$data];          $parameters=http_build_query(array_merge($query, $data));          $url=$parse_url['scheme'].':         $this->ch = curl_init($url."?".$parameters) ;            if($parse_url['scheme']=='https'){              curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, FALSE);                 curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, FALSE);          }          curl_setopt($this->ch, CURLOPT_REFERER, $route_url);            curl_setopt($this->ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; MSIE 6.01; Windows NT 6.2)');                                               curl_setopt($this->ch, CURLOPT_HTTPHEADER, ['X-FORWARDED-FOR:'.$ip, 'CLIENT-IP:'.$ip]);                   curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);         curl_setopt($this->ch, CURLOPT_BINARYTRANSFER, false) ;         curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, TRUE);                   if($open_cookie&&$cookie_path){              if(file_exists($cookie_path)){                  curl_setopt($this->ch, CURLOPT_COOKIEFILE, $cookie_path);              }else{                  curl_setopt($this->ch, CURLOPT_COOKIEJAR,  $cookie_path);              }          }          $data = curl_exec($this->ch) ;          $this->return_data=$data;          if('array'== $this->return_type&& is_array($data=json_decode($data,true)))return $data;          return $data;      }            public function upload($url, $data = null){                    $this->url=$url;          $this->request_type='post';          $this->request_data= json_encode($data);                    $this->ch = curl_init();            curl_setopt($this->ch, CURLOPT_URL, $url);            curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, FALSE);            curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, FALSE);            if (!empty($data)){                curl_setopt($this->ch, CURLOPT_POST, 1);                curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data);            }            curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);            $data = curl_exec($this->ch);            if('array'== $this->return_type&& is_array($data=json_decode($data,true)))return $data;          return $data;      }            public function download($url,$save_path){          $this->url=$url;          $this->request_type='get';          $this->request_data='download';          url_setopt($this->ch, CURLOPT_URL, $url);          curl_setopt($this->ch, CURLOPT_HEADER, 0);              curl_setopt($this->ch, CURLOPT_NOBODY, 0);             curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);          $package = curl_exec($this->ch);          $httpinfo = curl_getinfo($this->ch);          $media = array_merge(array('mediaBody' => $package), $httpinfo);                           preg_match('/\w\/(\w+)/i', $media["content_type"], $extmatches);          $fileExt = $extmatches[1];          $filename = time(). rand(1000, 9999).".{$fileExt}";          $dirname = $save_path;          if(!file_exists($dirname)){              mkdir($dirname,0777,true);          }          file_put_contents($dirname.$filename,$media['mediaBody']);          return $dirname.$filename;      }        public function curl_getinfo(){          $httpCode = curl_getinfo($this->ch,CURLINFO_HTTP_CODE);          return $httpCode;      }      function __destruct() {          if($this->ch)curl_close($this->ch);                   $request_route='';          if(isset($_SERVER['HTTP_REFERER']))$request_route=$_SERVER['HTTP_REFERER'];          $run_time=microtime(true)-$this->time_start;          AppLog($this->url, $this->request_data, $this->return_data, 5, $this->request_type, $run_time,$request_route);          trace('curl',$this->url.'运行时长'.$run_time);          return $this->return_data;      }              public function concurrence($url_array, $wait_usec = 1){          $mh = curl_multi_init();          $handle  = array();          foreach ($url_array as $i => $url) {              $this->ch = curl_init();              curl_setopt($this->ch, CURLOPT_URL, $url);              curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);              curl_setopt($this->ch, CURLOPT_TIMEOUT, 30);              curl_setopt($this->ch, CURLOPT_REFERER, 'https:             curl_setopt($this->ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');              curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, 1);              curl_setopt($this->ch, CURLOPT_MAXREDIRS, 7);              $ip=rand(1, 114).'.'.rand(1, 114).'.'.rand(1, 114).'.'. rand(1, 114);              curl_setopt($this->ch, CURLOPT_HTTPHEADER, ['X-FORWARDED-FOR:'.$ip, 'CLIENT-IP:'.$ip]);              curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);             curl_setopt($this->ch, CURLOPT_BINARYTRANSFER, false) ;             curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, TRUE);             curl_multi_add_handle($mh, $this->ch);              $handle[$i++] = $this->ch;          }          $running=null;                    $running=0;          do {              curl_multi_exec($mh, $running);          } while ($running>=1);                              $data=[];          foreach($handle as $i => $this->ch) {              $content  = curl_multi_getcontent($this->ch);              $data[$i] = (curl_errno($this->ch) == 0) ? $content : false;          }                    foreach($handle as $this->ch) {              curl_multi_remove_handle($mh, $this->ch);          }          curl_multi_close($mh);                    return $data;      }      public function concurrencePost(array $url_array,$data=[],$route_url='',$open_cookie=false,$cookie_path='',$ip=''){          if($route_url==false){              $baseUrl = ( isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') ? 'https:             $baseUrl .= isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : getenv('HTTP_HOST');              $route_url=$baseUrl.'/';          }          if($ip=='')$ip='114.'.rand(0, 114).'.'. rand(0, 114).'.'.rand(0, 114);          $mh = curl_multi_init();          $handle  = array();                    foreach ($url_array as $i => $url) {              $parse_url=parse_url($url);              $this->ch = curl_init();                           curl_setopt($this->ch, CURLOPT_URL, $url);              if($parse_url['scheme']=='https'){                  curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, FALSE);                     curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, FALSE);              }              curl_setopt($this->ch, CURLOPT_REFERER, $route_url);                curl_setopt($this->ch, CURLOPT_HTTPHEADER, ['X-FORWARDED-FOR:'.$ip, 'CLIENT-IP:'.$ip]);              curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);             curl_setopt($this->ch, CURLOPT_BINARYTRANSFER, false) ;             curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, TRUE);                          curl_setopt($this->ch, CURLOPT_POST, 1);              if(is_array($data[$i]))$data[$i]=http_build_query($data[$i]);              curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data[$i]);                             if($open_cookie&&$cookie_path){                  if(file_exists($cookie_path)){                      curl_setopt($this->ch, CURLOPT_COOKIEFILE, $cookie_path);                  }else{                      curl_setopt($this->ch, CURLOPT_COOKIEJAR,  $cookie_path);                  }              }                            curl_multi_add_handle($mh, $this->ch);              $handle[$i++] = $this->ch;          }                    $running=0;          do {              curl_multi_exec($mh, $running);          } while ($running>=1);                    $data=[];          foreach($handle as $i => $this->ch) {              $content  = curl_multi_getcontent($this->ch);              $data[$i] = (curl_errno($this->ch) == 0) ? $content : false;          }                    foreach($handle as $this->ch) {              curl_multi_remove_handle($mh, $this->ch);          }          curl_multi_close($mh);          return $data;                }  }  