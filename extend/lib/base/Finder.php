<?php 
  namespace lib\base;  use think\Request;  use think\Db;    trait  Finder {            public static function getDbstructField(string $app_name,string $db_name,array $out_data=[]){          $incluefile=shopXianEnv('extend_path').'dbstruct/'.$app_name.'/'.$db_name.'.php';          if(!file_exists($incluefile)) return \trigger_error($incluefile.'文件不存在',E_USER_WARNING);          $dbstruct= require $incluefile;          if($dbstruct['Stru']&&  is_array($dbstruct['Stru'])){              foreach($dbstruct['Stru'] as $k=>$v){                  if(in_array($k, $out_data))unset ($dbstruct['Stru'][$k]);              }          }          return $dbstruct['Stru'];      }            public static function getFinderField(string $app_name,string $db_name,array $out_data=[]){          $incluefile=shopXianEnv('extend_path').'dbstruct/'.$app_name.'/'.$db_name.'.php';          if(!file_exists($incluefile)) exit($incluefile.'文件不存在');          $dbstruct= require $incluefile;          if($dbstruct['Stru']&&  is_array($dbstruct['Stru'])){              foreach($dbstruct['Stru'] as $k=>$v){                  if((isset($v['in_list'])&&$v['in_list']!=true)||  in_array($k, $out_data))unset ($dbstruct['Stru'][$k]);              }          }                   $fieldShow=cache('BaseFinderShow'.$app_name.'_'.$db_name);          if(!$fieldShow){              $fieldShow=appModel('base', 'BaseFinderShow')->find($app_name.'_'.$db_name);              if($fieldShow)$fieldShow=json_decode($fieldShow->toArray()['finder_data'],true);              $fieldShow=$fieldShow?$fieldShow:[];              if($fieldShow)cache('BaseFinderShow'.$app_name.'_'.$db_name,$fieldShow);          }          if($fieldShow){              $Stru=[];              foreach($fieldShow as $k=>$v){                                   if(isset($dbstruct['Stru'][$k])){                      if(1==$v){                          $Stru[$k]=$dbstruct['Stru'][$k];                     }                      unset($dbstruct['Stru'][$k]);                  }              }              $dbstruct['Stru']=$Stru+$dbstruct['Stru'];         }          return $dbstruct['Stru'];      }            public static function getDetail(string $app,string $finder,string $func,$id){          $get=  input('');          if($app==false||$finder==false||file_exists($this->app_path.$app.'/lib/finder/'.$finder.'.php')==false||$func==false||$id==false)exit($this->app_path.$app.'/lib/finder/'.$finder.'.php'."finder不存在");          $eval='$finderobj=new \\app\\'.$app.'\\lib\\finder\\'.$finder.'();';          eval($eval);          $detail=$finderobj->$func($id);          echo $detail;die;      }            public static function setFinderShow(string $app_name,string $table_name){          $post= input();          $finderField= self::getDbstructField($app_name, $table_name,[]);                   $show_id=$app_name.'_'.$table_name;          unset($post['app_name'],$post['table_name']);          foreach($post as $k=>$v)unset ($finderField[$k]);          foreach ($finderField as $k=>$v){              if(isset($v['in_list'])&&$v['in_list'])$post[$k]=1;          }          $data= json_encode($post);          $obj=appModel('base', 'BaseFinderShow');          $save_data=['show_id'=>$show_id,'finder_data'=>$data];          if($obj->find($show_id)){              appModel('base', 'BaseFinderShow')->where(['show_id'=>$show_id])->update($save_data);          }else{              appModel('base', 'BaseFinderShow')->save($save_data);          }          cache('BaseFinderShow'.$app_name.'_'.$table_name,null);      }            public function Finderexport($table_name,$id){          $ids=$id;          $getFinderSearchKey=$this->getFinderSearchKey(request()->module(), $table_name,[]);          $field_more_so=$getFinderSearchKey['field_more_so'];                  echo $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/export.html',['ids'=>$ids,'field_more_so'=>$field_more_so]);          die;      }            public function Finderimport($table_name){          $model=$this->getModelName($table_name);          $submit_url= url('FinderimportTo', "model=$model&element_id=id", true, true);          $merge=[];          $default=[              'app_name'=>request()->module(),              'table_name'=>$table_name,              'add_time'=> time()          ];          return $this->formBuilder('base', 'base_import_data',[], $submit_url,$merge,$default);      }            public function FinderimportTo(){          $obj=appModel('base', 'BaseImportData');          $post=input('post.');          $file_path=dirname($_SERVER['SCRIPT_FILENAME']).DIRECTORY_SEPARATOR.$post['file_path'];          if(!file_exists($file_path))exit('上传的文件不存在');          $pathinfo=pathinfo($post['file_path']);          if(isset($pathinfo['extension'])==false||!in_array($pathinfo['extension'], ['xls','xlsx']))exit('文件格式必须为xls、xlsx');          $arr=importExecl($file_path);          if($arr==false)exit("无法识别的文件内容错误");          if($obj->isUpdate(false)->save($post)){                           unset($arr[1]);              $arr= array_values($arr);              $getfield=$this->getDbstructField($post['app_name'], $post['table_name'],[]);              $field_key=[];              $getfield_key= array_keys($getfield);              foreach($arr[0] as $kk=>$vv){                  foreach($getfield as $k=>$v){                      if(trim($v['label'])== trim($vv)){                          $field_key[$kk]=$k;                          unset($getfield[$k]);                          unset($arr[0][$kk]);                      }                  }              }              if($arr[0]){                      $obj->where(['id'=>$obj->id])->update(['states'=>'-1','states_msg'=>'数据不匹配,'.$vv.'是一个在表中不存在的字段']);                      exit($vv.'是一个在表中不存在的字段');              }              unset($arr[0]);                           $save_data_all=[];              if($arr){                  foreach($arr as $k=>$v){                      $save_data=[];                      foreach ($field_key as $key => $value) {                          $save_data[$value]=$v[$key];                      }                      $save_data_all[]=$save_data;                  }                  $model=$this->getModelName($post['table_name']);                  Db::startTrans();                  try{                      appModel($post['app_name'], $model)->saveAll($save_data_all,false);                      Db::commit();                   } catch (\Exception $e) {                                           Db::rollback();                      $obj->where(['id'=>$obj->id])->update(['states'=>'-1','states_msg'=>$e->getMessage()]);                      exit(" 错误信息:".$e->getMessage());                  }                      $obj->where(['id'=>$obj->id])->update(['states'=>'1','states_msg'=>'ok','last_time'=> time()]);                  return $this->success("导入成功");              }else{                  $obj->where(['id'=>$obj->id])->update(['states'=>'-1','states_msg'=>'数据源为空,无可导入的数据']);                  exit('数据源为空,无可导入的数据');              }          }else{              return $this->error('添加导入数据失败');          }      }            public function exportId(string $table_name,string $id,string $element_id){          if($id==false||$table_name==false)return trigger_error('参数错误');          $model=$this->getModelName($table_name);          $id= json_decode($id, true);          $app_name=request()->module();          $getfield=$this->getDbstructField($app_name, $table_name,[]);          $list_obj = appModel(request()->module(), $model)->where($element_id,'in',$id)->column(implode(',', array_keys($getfield)));          $list_obj= array_values($list_obj);          $table_name= $table_name;          $title=[];          foreach($list_obj[0] as $k=>$v){              if(isset($getfield[$k]['label'])){                  $title[]=$getfield[$k]['label'];              }else{                  $title[]='null';              }          }          $data=[];          foreach($list_obj as $k=>$v){              foreach ($v as $key => $value) {                  $data[$k][]=$value;              }          }          $fileName=$table_name;           $savePath='./';           $isDown=true;          exportExcel($table_name,$title, $data, $fileName, $savePath, $isDown);          die;      }            public function finderAdd($app_name,$db_name,$element_id,$id=false){          $model=$this->getModelName($db_name);                  $merge=[];          if($id){              $getfield=$this->getDbstructField($app_name, $db_name,[]);              $merge= $getfield;              $row=appModel($app_name, $model)->find($id);              if($row){                  $row=$row->toArray ();                  foreach($row as $k=>$v){                      if(isset($getfield[$k]))$merge[$k]['default']=isset ($merge[$k]['fun'])?$merge[$k]['fun']($v):$v;;                  }              }          }          $submit_url= url ('autoToAdd', "model=$model&element_id=$element_id", true, true);                  return $this->formBuilder($app_name, $db_name,[], $submit_url,$merge);      }              public function autoToAdd($model,$element_id,$url='',$data=[]){           if(!$data)$data= input('post.');          if($model==false||$element_id==false)return trigger_error('参数错误');          Db::startTrans();          try{              $obj=appModel(request()->module(), $model);              $ok=$obj->isUpdate($data[$element_id]==true)->save($data);                           Db::commit();           } catch (\Exception $e) {                           Db::rollback();              exit(" 错误信息:".$e->getMessage());          }                 return $this->statusMsg(true, "操作成功", $url);       }             public function finderDel($model='',$id=0){          if(is_array($id))$id= array_values ($id);          if(appModel(request()->module(), $model)->destroy($id))return $this->statusMsg(true, "操作成功", '');          return $this->statusMsg(false, "操作失败", '');      }            public function formBuilder($app_name,$db_name,$out_data=[],$submit_url='',$merge=[],$default=[],$body='',$tpl='form_builder'){          $extend_path=shopXianEnv('extend_path');          $incluefile=$extend_path.'dbstruct/'.$app_name.'/'.$db_name.'.php';          if(!file_exists($incluefile)) return \trigger_error($incluefile.'文件不存在',E_USER_WARNING);          $dbstruct= require $incluefile;                  if($dbstruct['Stru']&&  is_array($dbstruct['Stru'])){              if(isset($out_data[0])&&'*'==$out_data[0]){                  $dbstruct['Stru']=[];              }else{                  foreach($dbstruct['Stru'] as $k=>$v){                      if(in_array($k, $out_data))unset ($dbstruct['Stru'][$k]);                  }              }          }          $list=array_merge($dbstruct['Stru'], $merge);          if($default&&  is_array($default)){              foreach ($default as $key => $value) {                  if(isset($list[$key])){                      $list[$key]['default']=$value;                  }              }          }          $this->assign('list', $list);          $this->assign('submit_url', $submit_url);          $this->assign('body', $body);          return $this->fetch($extend_path.'view/base/'.$this->site_type.'/'.$tpl.'.html');      }                protected function tree($app_name,$table_name,$where=[],$arguments=[],$element_id,$out_field=[],$order_by='desc',$tpl='tree'){          $model= $this->getModelName($table_name);          $tree_list_data=$app_name;          if(is_string($app_name)){              $getfield= self::getFinderField($app_name, $table_name,$out_field);              $field= implode(',',array_keys($getfield));              $obj= appModel($app_name, $model);              $tree_list_data= $obj->where($where)->order($order_by)->cache(1)->column($element_id.' as id,'.$arguments['tree_title'].' as tree_title,'.$arguments['tree_parent_id'].' as tree_parent_id,'.$field,$element_id);          }          $this->assign('tree_list_data', json_encode($tree_list_data));          if(isset($arguments['list_url']))$arguments['list_url']=str_replace('.'.config('url_html_suffix'),'',$arguments['list_url']);          $this->assign('arguments', $arguments);          $this->assign('model', $model);          return $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/'.$tpl.'.html');      }            protected function finder($app_name,$table_name,$where=[],$arguments=[],$element_id,$out_field=[],$order_by='desc',$tpl='finder'){          if(request()->isAjax()){              $res=$this->getLayFinderData($app_name, $table_name, $where, $arguments, $element_id, $out_field, $order_by);              exit(json_encode($res, JSON_UNESCAPED_UNICODE));          }                   $getFinderLayTableField=$this->getFinderLayTableField($app_name, $table_name,$arguments,$element_id,$out_field);          $getFinderSearchKey=$this->getFinderSearchKey($app_name, $table_name, $out_field);                   $so='';          unset($_GET['tree_id']);          if($_GET)$so= '?'. http_build_query($_GET);          $finder_type='list';          if(isset($arguments['finder_type']))$finder_type=$arguments['finder_type'];          $model=$this->getModelName($table_name);          $this->assign('model',$model);          $this->assign('finder_type',$finder_type);          $this->assign('tablefield_json', json_encode($getFinderLayTableField, JSON_UNESCAPED_UNICODE));          $this->assign('tablefield', $getFinderLayTableField);          $this->assign('findersearchkey', $getFinderSearchKey);          $this->assign('arguments', $arguments);          $this->assign('element_id', $element_id);          $this->assign('app_name', $app_name);          $this->assign('table_name', $table_name);          $this->assign('out_field', json_encode($out_field));          $this->assign('so', $so);                  return $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/'.$tpl.'.html');      }            private function getModelName($db_name){          $model_file=explode('_', $db_name);           $model='Model不存在';          if($model_file&&  is_array($model_file)){              $model='';              foreach($model_file as $k2=>$v2){                  $model.=strtoupper($v2[0]).substr($v2, 1);              }          }              return $model;      }            public function setFinder($app_name,$table_name,$element_id,$out_field){          $tpl='setfinder';          $out_field=json_decode($out_field, true);          if(!is_array($out_field))$out_field=[];          $getfield= self::getDbstructField($app_name, $table_name,$out_field);          foreach ($getfield as $key => $value) {              if(isset($value['in_list'])&&$value['in_list']==false)unset ($getfield[$key]);          }          unset($getfield[$element_id]);          $fieldShow=appModel('base', 'BaseFinderShow')->find($app_name.'_'.$table_name);          if($fieldShow)$fieldShow=json_decode($fieldShow->toArray()['finder_data'],true);          $fieldShow=$fieldShow?$fieldShow:[];          if($fieldShow){              $Stru=[];              foreach($fieldShow as $k=>$v){                                   if(isset($getfield[$k])){                      $Stru[$k]=$getfield[$k];                      unset($getfield[$k]);                  }              }              $getfield=$Stru+$getfield;         }          $this->assign('fieldShow', $fieldShow);          $this->assign('getfield', $getfield);          $this->assign('app_name', $app_name);          $this->assign('table_name', $table_name);          return $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/'.$tpl.'.html');      }            public function advancedSearch($app_name,$table_name,$element_id,$out_field){          $tpl='advancedsearch';          $out_field=json_decode($out_field, true);          if(!is_array($out_field))$out_field=[];          $getFinderSearchKey=$this->getFinderSearchKey($app_name, $table_name, $out_field);                   $this->assign('field_more_so',$getFinderSearchKey['field_more_so']);          return $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/'.$tpl.'.html');      }            public function getLayFinderData($app_name,$table_name,$where=[],$arguments=[],$element_id,$out_field=[],$order_by='desc'){          $model= $this->getModelName($table_name);          $getfield= self::getFinderField($app_name, $table_name,$out_field);          $input= input();                  $rule_satisfy=['eq','neq','elt','egt','like','between'];          foreach($getfield as $k=>$v){              if(isset($input[$k])&&isset($input[$k]['val'])&& in_array(trim($input[$k]['rule']), $rule_satisfy)){                  $rule=trim($input[$k]['rule']);                  $val=trim($input[$k]['val'],'');                  $like='';                  if($rule=='like')$like='%';                  $val=$like.$val.$like;                  $where[]=[$k,$rule,$val];              }          }          $field= implode(',',array_keys($getfield));          $obj= appModel($app_name, $model);          $limit= input('limit', 10);                   $list_obj = $obj->where($where)->field($element_id.' as id,'.$field)->order($order_by)->cache(1)->paginate($limit,false,['query'=> input()]);          $list_obj=$list_obj->toArray();          if(isset($arguments['is_detail'])&&$arguments['is_detail']){              foreach ($list_obj['data'] as $key => $value) {                  $list_obj['data'][$key]['finder_detail']='<i onClick="selectDetails(this)"  data-id="'.$value['id'].'" style="font-size: 28px;" class="icon Hui-iconfont finder_detail">&#xe681;</i>';              }          }          $res=[              'code'=>$list_obj['total']?0:1,              'msg'=>'没有数据',              'count'=>$list_obj['total'],              'data'=> $this->getStructVals($app_name, $table_name, $list_obj['data'])          ];          return $res;      }            public function getFinderLayTableField($app_name, $table_name,$arguments,$element_id,$out_field){          $getfield= self::getFinderField($app_name, $table_name,$out_field);          $newField=[];          $newField[]=[              'checkbox'=>true,              'fixed'=>'left'          ];          if(isset($arguments['is_detail'])&&$arguments['is_detail']){              $newField[]=[                  'field'=>'finder_detail',                  'title'=>'查看',                  'fixed'=>'left',                  'width'=> isset($getfield[$element_id]['width'])?$getfield[$element_id]['width']:60,              ];          }          $newField[]=[              'field'=>'id',              'title'=> isset($getfield[$element_id]['label'])?$getfield[$element_id]['label']:'id',              'sort'=>true,              'fixed'=>'left',              'width'=> isset($getfield[$element_id]['width'])?$getfield[$element_id]['width']:$getfield[$element_id]['length']*6,          ];          unset($getfield[$element_id]);          if(file_exists($this->app_path.$app_name.'/lib/finder/'.$table_name.'.php')){              $eval='$table_name_finder=new app\\'.$app_name.'\\lib\\finder\\'.$table_name.'();';              eval($eval);              $key_arr2=$table_name_finder->tags_rank;              $tags=$table_name_finder->tags;              $key_arr1=array_keys($getfield);              $key_arr1=merge($key_arr1, $key_arr2);              foreach($key_arr1 as $k=>$v){                  if(isset($tags[$v])){                      $tags_v=[                          'field'=>$v,                          'label'=>$tags[$v],                      ];                      if(isset($table_name_finder->tags_field[$v]))$tags_v=array_merge ($table_name_finder->tags_field[$v], $tags_v);                      $newField[$v]= $this->getFieldTmp($v,$tags_v);                  }else{                      if(isset($getfield[$v]))$newField[$v]=$this->getFieldTmp($v,$getfield[$v]);                  }              }          }else{                           foreach($getfield as $k=>$v){                  $newField[$k]=$this->getFieldTmp($k,$v);              }          }          $getfield=$newField;          return $getfield;      }            protected function getFinderSearchKey($app_name, $table_name,$out_field){          $getfield= self::getFinderField($app_name, $table_name,$out_field);          $field_so=[];          $field_more_so=[];          foreach($getfield as $k=>$v){              if(isset($v['is_row_search'])&&$v['is_row_search'])$field_so[$k]=$v['label'];              if(isset($v['is_more_search'])&&$v['is_more_search'])$field_more_so[$k]=$v;          }          return [              'field_so'=>$field_so,              'field_more_so'=>$field_more_so          ];      }            private function getFieldTmp($k,$v){          $field_tmp=[              'field'=>$k,              'title'=>$v['label'],              'sort'=>isset($v['sort'])?$v['sort']:false,              'fixed'=>isset($v['fixed'])?$v['fixed']:false,              'width'=> isset($v['width'])?$v['width']:200,          ];          if(isset($v['minWidth']))$field_tmp['minWidth']=$v['minWidth'];          if(isset($v['edit']))$field_tmp['edit']=$v['edit'];          if(isset($v['style']))$field_tmp['style']=$v['style'];          if(isset($v['align']))$field_tmp['align']=$v['align'];          return $field_tmp;      }              protected function virtualFinder($app_name,$table_name,$where=[],$arguments=[],$obj,$element_id,$out_field=[],$order_by='desc',$tpl='finder'){          $get=  input();          $limit=20;          $this->assign('app_name', $app_name);          $this->assign('table_name', $table_name);          if(isset($get['limit']))$limit=$get['limit'];          if($limit>200)$limit=200;          $getfield=$this->getDbstructField($app_name, $table_name,$out_field);          if(isset($get['field_key'])&&$get['field_key']&&isset($get['field_val'])){              $where2[$get['field_key']]=['like','%'.$get['field_val'].'%'];              $list_obj = $obj->where($where)->where($where2)->paginate($limit,false,['query'=>$get]);          }else if(isset ($get['advanced'])&&  count($get)>=2){              unset($get['advanced']);              $where2='';              foreach($get as $k=>$v){                  if($v){                      $where2.=' '.$k.'="'.$v.'" and';                  }              }              $where2=rtrim($where2, 'and');              $list_obj = $obj->where($where)->where($where2)->paginate($limit,false,['query'=>$get]);          }else{              $list_obj = $obj->where($where)->paginate($limit,false,['query'=>$get]);          }          return $this->finderCommon($list_obj, $getfield, $app_name, $table_name, $where, $arguments, $obj, $element_id, $out_field, $order_by, $tpl);      }            public function finderDetailHtml($app,$finder){          if($app==false||$finder==false||file_exists($this->app_path.$app.'/lib/finder/'.$finder.'.php')==false)exit("finder不存在");          $eval='$finderobj=new \\app\\'.$app.'\\lib\\finder\\'.$finder.'();';          eval($eval);          $detail=$finderobj->detail;          $this->assign('get', input());          $this->assign('detail', $detail);          if (request()->isAjax()){              echo $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/finder_detail_ajax.html');          }else{              echo $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/finder_detail.html');          }          die;      }             protected function getStructLabel($app_name,$db_name,$filed,$data=[]){          if(is_string($filed))$filed= explode (',', $filed);          $struct=self::getDbstructField($app_name, $db_name);          $label=[];          $struct_key= array_keys($struct);          if($filed){                           foreach ($filed as $value) {                  if(in_array($value, $struct_key)&&isset($struct[$value]['label'])){                      $label[$value]=$struct[$value]['label'];                  }else{                      $label[$value]=$value;                  }              }          }else if($data){             foreach ($data as $key => $value) {                  if(in_array($key, $struct_key)&&isset($struct[$key]['label'])){                      $label[$key]=$struct[$key]['label'];                  }else{                      $label[$key]=$key;                  }              }          }else{              exit('$db_name，$data 两个参数不能空时为空,至少有一个参数');          }          return $label;      }              protected function getStructVal($app_name,$db_name,$data,$struct=[]){          if(!$struct)$struct=self::getDbstructField($app_name, $db_name);          foreach($data as $k=>$v){              if(isset($struct[$k]['value'])&& is_array($struct[$k]['value'])&&isset($struct[$k]['value'][$v])){                  $data[$k]=$struct[$k]['value'][$v];              }else if(isset ($struct[$k]['fun'])&&$struct[$k]['fun']){                  $data[$k]=$struct[$k]['fun']($v);              }else{                  $data[$k]=$v;              }          }          return $data;      }            public function getStructVals($app_name,$db_name,$data){          $struct=self::getDbstructField($app_name, $db_name);          $table_name_finder=[];          if(file_exists($this->app_path.$app_name.'/lib/finder/'.$db_name.'.php')){              $eval='$table_name_finder=new app\\'.$app_name.'\\lib\\finder\\'.$db_name.'();';              eval($eval);              $key_arr2=$table_name_finder->tags_rank;              $tags=$table_name_finder->tags;              if(isset($data[0])==false)$data[0]=[];              $key_arr1=array_keys($data[0]);              if($key_arr1&&$key_arr2)$key_arr1=merge($key_arr1, $key_arr2);              $newField=[];              foreach($key_arr1 as $k=>$v){                  if(isset($tags[$v])){                      $newField[$v]['label']=$tags[$v];                  }else{                      if(isset($struct[$v]))$newField[$v]=$struct[$v];                  }              }              $struct=$newField;              foreach($data as $k=>$v){                  $tmpv=[];                  foreach ($key_arr1 as $k1 => $v1) {                      if(method_exists($table_name_finder,$v1)){                          $tmpv[$v1]=$table_name_finder->$v1($v);                      }else{                          $tmpv[$v1]=$v[$v1];                      }                  }                  $data[$k]=$this->getStructVal($app_name, $db_name, $tmpv,$struct);              }          }else{              foreach($data as $k=>$v){                  $data[$k]=$this->getStructVal($app_name, $db_name, $v,$struct);              }          }          return $data;      }            public function detail($app,$finder,$func,$id){                   $get=  input('');          if($app==false||$finder==false||file_exists($this->app_path.$app.'/lib/finder/'.$finder.'.php')==false||$func==false||$id==false)exit("finder不存在");          $eval='$finderobj=new \\app\\'.$app.'\\lib\\finder\\'.$finder.'();';          eval($eval);          $detail=$finderobj->$func($id);          echo $detail;die;      }      public function finderUploadFile($return=false){          return $this->finderUploadImg($return);      }        public function finderUploadImg($return=false){          return $this->finderUpload($return);      }            public function finderUpload($return=false){          return $this->commonUpload($return);      }      protected function commonUpload($return=false){          if($_FILES['file']['error']){              $res= [                      'type'=>'',                      'path'=> '',                      'msg'=>'',                  ];              switch ($_FILES['file']['error']){              case 1:                  $res['msg']="上传文件大小超过了php.ini的设置大小";                  break;              case 2:                  $res['msg']="上传文件超过了前台表单的大小";                  break;               case 3:                  $res['msg']="没有上传完成，文件纸传了一部分";                  break;              case 4:                  $res['msg']="文件还没有上传";                  break;              }          }else{              $files = request()->file('file');              $upload_path='uploads'.config('app.upload_path');              mkdirs($upload_path);              $info = $files->move(dirname($_SERVER['SCRIPT_FILENAME']).DIRECTORY_SEPARATOR . $upload_path);              $res=[];              if($info){                  $res= [                      'type'=>$info->getExtension(),                      'path'=> str_replace("\\", '/', $upload_path.DIRECTORY_SEPARATOR.$info->getSaveName()),                      'msg'=>'ok',                  ];              }else{                  $res= [                      'type'=>'',                      'path'=> '',                      'msg'=>$file->getError(),                  ];              }          }          if($return)return $res;          echo json_encode($res);die;      }      public function imagesBrowser($upload_num=1,$select_num=1,$dom_id=''){          $this->assign("dom_id", $dom_id);          return $this->finderImagesBrowser(                  'files',                   'files_data',                   appModel('files', "FilesData"),                  'file_id as id , adj_path as path , file_name as title',                  '',                  'file_id desc',                  [],                  $upload_num,                  $select_num,                  $dom_id                  );      }            private function finderImagesBrowser($app_name,$db_name,$obj,$field,$submit_url,$order_by,$where=[],$upload_num=1,$select_num=1,$dom_id='',$tpl='imagesbrowser'){          $limit=input('limit',20);          if($limit>200)$limit=200;          $list_obj=$obj->where($where)->field($field)->order($order_by)->cache(3)->paginate($limit);          $data=[              'submit_url'=>$submit_url,              'upload_num'=>$upload_num,              'select_num'=>$select_num,              'list_data'=>$list_obj->toArray(),              'list_page'=>$list_obj->render(),              'dom_id'=> $dom_id,          ];          if(request()->isAjax()){              exit(json_encode([                  'list'=>$data['list_data'],                  'page'=>$data['list_page'],              ], JSON_UNESCAPED_UNICODE));          }          return $this->fetch(shopXianEnv('extend_path').'view/base/'.$this->site_type.'/'.$tpl.'.html',$data);      }  }  