<?php 

           /**
            * 秀仙系统 shopxian_release/3.0.0
            * ============================================================================
            * * 版权所有 2017-2018 上海秀仙网络科技有限公司，并保留所有权利。
            * 网站地址: http://www.shopxian.com；
            * ----------------------------------------------------------------------------
            * 本软件只能免费使用  不允许对程序代码以任何形式任何目的再发布或者出售。
            * ============================================================================
            * 作者: 张启全 

            * 时间: 2018-03-11 16:08:53
            */
         namespace lib\base;      trait Reflection {      private $methodIsPublic;      protected $methodIsStatic;      protected $methodIsProtected;            protected $classIsTrait;      protected $classIsAbstract;        protected $ReflectionMethod;      protected $ReflectionClass;            protected $ReflectionMethodName;      protected $ReflectionClassName;      public function __Reflection($class, $method){          $this->ReflectionClassName=$class;          $this->ReflectionMethodName=$method;                    $this->ReflectionClass=new \ReflectionClass($class);          if(!$this->ReflectionClass->hasMethod($method)){                exit(abort(404, $this->ReflectionClassName."类中方法".$method."不存在"));          }          $this->ReflectionMethod = new \ReflectionMethod($class, $method);      }            public function methodIsPublic(){          if ($this->ReflectionMethod->isPublic()) {              return true;          }          return false;      }            public function methodIsStatic(){          if ($this->ReflectionMethod->isStatic()) {              return true;          }          return false;      }            public function classIsTrait(){          if ($this->ReflectionClass->isTrait()) {              return true;          }          return false;      }            public function classIsAbstract(){          if ($this->ReflectionClass->isAbstract()) {              return true;          }          return false;      }            public function exec($input){          $return_data=['code'=>0];          $method=$this->ReflectionClass->getMethod($this->ReflectionMethodName);           $parameters=$this->ReflectionMethod->getParameters();          $arguments=[];          $param_miss='';          foreach ($parameters as $param) {              if(isset($input[$param->getName()])){                  $arguments[]=$input[$param->getName()];              }else if($param->isOptional()){                  $arguments[]=$param->getDefaultValue();              }else{                  $param_miss.=' $'.$param->getName();              }          }          if(''!=$param_miss){              $return_data['msg']='方法参数错误:'.$param_miss;          }else{              if($method->isPublic()&&!$method->isStatic()){                  $return_data=$method->invokeArgs(new $this->ReflectionClassName, array_values($arguments));                } else {                  $return_data['msg']='方法类型错误:'.$this->ReflectionMethodName;              }          }          return $return_data;      }            public function getDoc(){          $method=$this->ReflectionClass->getMethod($this->ReflectionMethodName);           echo str_replace("\n", '<br />', $method->getDocComment()).'<br />';          $parameters=$this->ReflectionMethod->getParameters();          $arguments='';          foreach ($parameters as $param) {              if($param->isOptional()){                  $arguments.='$'.$param->getName().'='.$param->getDefaultValue().',';              }else{                  $arguments.='$'.$param->getName().',';              }          }          $arguments=rtrim($arguments, ',');          $public=$method->isPublic()?'public ':'';          $private=$method->isPrivate()?'private ':'';          $protected=$method->isProtected()?'protected ':'';          $static=$method->isStatic()?'static ':'';          $final=$method->isFinal()?'final ':'';          return            $public.          $private.          $protected.           $static.           $final.           'function '.          $this->ReflectionMethodName.'('.$arguments.'){<br /><br />}';      }  }  